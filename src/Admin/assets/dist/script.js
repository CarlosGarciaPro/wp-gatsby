(function () {
	'use strict';

	function createCommonjsModule(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var _typeof_1=createCommonjsModule(function(a){function b(c){"@babel/helpers - typeof";return a.exports="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?b=function(a){return typeof a}:b=function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},b(c)}a.exports=b;});

	var runtime_1=createCommonjsModule(function(a){
	var b=function(a){function b(a,b,c){return Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}),a[b]}function c(a,b,c,d){
	var f=b&&b.prototype instanceof e?b:e,g=Object.create(f.prototype),h=new n(d||[]);return g._invoke=j(a,c,h),g}
	function d(a,b,c){try{return {type:"normal",arg:a.call(b,c)}}catch(a){return {type:"throw",arg:a}}}
	function e(){}function f(){}function g(){}
	function h(a){["next","throw","return"].forEach(function(c){b(a,c,function(a){return this._invoke(c,a)});});}function i(a,b){function c(e,f,g,h){var i=d(a[e],a,f);if("throw"===i.type)h(i.arg);else {var j=i.arg,k=j.value;return k&&"object"===_typeof_1(k)&&r.call(k,"__await")?b.resolve(k.__await).then(function(a){c("next",a,g,h);},function(a){c("throw",a,g,h);}):b.resolve(k).then(function(a){j.value=a,g(j);},function(a){
	return c("throw",a,g,h)})}}function e(a,d){function e(){return new b(function(b,e){c(a,d,b,e);})}return f=
	f?f.then(e,
	e):e()}
	var f;this._invoke=e;}function j(a,b,c){var e="suspendedStart";return function(f,g){if("executing"===e)throw new Error("Generator is already running");if("completed"===e){if("throw"===f)throw g;
	return p()}for(c.method=f,c.arg=g;;){var h=c.delegate;if(h){var i=k(h,c);if(i){if(i===w)continue;return i}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if("suspendedStart"===e)throw e="completed",c.arg;c.dispatchException(c.arg);}else "return"===c.method&&c.abrupt("return",c.arg);e="executing";var j=d(a,b,c);if("normal"===j.type){if(e=c.done?"completed":"suspendedYield",j.arg===w)continue;return {value:j.arg,done:c.done}}"throw"===j.type&&(
	e="completed",c.method="throw",c.arg=j.arg);}}}
	function k(a,b){var c=a.iterator[b.method];if(void 0===c){if(b.delegate=null,"throw"===b.method){
	if(a.iterator["return"]&&(b.method="return",b.arg=void 0,k(a,b),"throw"===b.method))
	return w;b.method="throw",b.arg=new TypeError("The iterator does not provide a 'throw' method");}return w}var e=d(c,a.iterator,b.arg);if("throw"===e.type)return b.method="throw",b.arg=e.arg,b.delegate=null,w;var f=e.arg;if(!f)return b.method="throw",b.arg=new TypeError("iterator result is not an object"),b.delegate=null,w;if(f.done)b[a.resultName]=f.value,b.next=a.nextLoc,"return"!==b.method&&(b.method="next",b.arg=void 0);else
	return f;
	return b.delegate=null,w}
	function l(a){var b={tryLoc:a[0]};1 in a&&(b.catchLoc=a[1]),2 in a&&(b.finallyLoc=a[2],b.afterLoc=a[3]),this.tryEntries.push(b);}function m(a){var b=a.completion||{};b.type="normal",delete b.arg,a.completion=b;}function n(a){this.tryEntries=[{tryLoc:"root"}],a.forEach(l,this),this.reset(!0);}function o(a){if(a){var b=a[t];if(b)return b.call(a);if("function"==typeof a.next)return a;if(!isNaN(a.length)){var c=-1,d=function b(){for(;++c<a.length;)if(r.call(a,c))return b.value=a[c],b.done=!1,b;return b.value=void 0,b.done=!0,b};return d.next=d}}
	return {next:p}}function p(){return {value:void 0,done:!0}}var q=Object.prototype,r=q.hasOwnProperty,s="function"==typeof Symbol?Symbol:{},t=s.iterator||"@@iterator",u=s.asyncIterator||"@@asyncIterator",v=s.toStringTag||"@@toStringTag";try{b({},"");}catch(a){b=function(a,b,c){return a[b]=c};}a.wrap=c;var w={},x={};x[t]=function(){return this};var y=Object.getPrototypeOf,z=y&&y(y(o([])));z&&z!==q&&r.call(z,t)&&(x=z);var A=g.prototype=e.prototype=Object.create(x);
	return f.prototype=A.constructor=g,g.constructor=f,f.displayName=b(g,v,"GeneratorFunction"),a.isGeneratorFunction=function(a){var b="function"==typeof a&&a.constructor;return !!b&&(b===f||
	"GeneratorFunction"===(b.displayName||b.name))},a.mark=function(a){return Object.setPrototypeOf?Object.setPrototypeOf(a,g):(a.__proto__=g,b(a,v,"GeneratorFunction")),a.prototype=Object.create(A),a},a.awrap=function(a){return {__await:a}},h(i.prototype),i.prototype[u]=function(){return this},a.AsyncIterator=i,a.async=function(b,d,e,f,g){void 0===g&&(g=Promise);var h=new i(c(b,d,e,f),g);return a.isGeneratorFunction(d)?h
	:h.next().then(function(a){return a.done?a.value:h.next()})},h(A),b(A,v,"Generator"),A[t]=function(){return this},A.toString=function(){return "[object Generator]"},a.keys=function(a){var b=[];for(var c in a)b.push(c);
	return b.reverse(),function c(){for(;b.length;){var d=b.pop();if(d in a)return c.value=d,c.done=!1,c}
	return c.done=!0,c}},a.values=o,n.prototype={constructor:n,reset:function reset(a){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(m),!a)for(var b in this)
	"t"===b.charAt(0)&&r.call(this,b)&&!isNaN(+b.slice(1))&&(this[b]=void 0);},stop:function stop(){this.done=!0;var a=this.tryEntries[0],b=a.completion;if("throw"===b.type)throw b.arg;return this.rval},dispatchException:function dispatchException(a){function b(b,d){return f.type="throw",f.arg=a,c.next=b,d&&(c.method="next",c.arg=void 0),!!d}if(this.done)throw a;for(var c=this,d=this.tryEntries.length-1;0<=d;--d){var e=this.tryEntries[d],f=e.completion;if("root"===e.tryLoc)
	return b("end");if(e.tryLoc<=this.prev){var g=r.call(e,"catchLoc"),h=r.call(e,"finallyLoc");if(g&&h){if(this.prev<e.catchLoc)return b(e.catchLoc,!0);if(this.prev<e.finallyLoc)return b(e.finallyLoc)}else if(g){if(this.prev<e.catchLoc)return b(e.catchLoc,!0);}else if(!h)throw new Error("try statement without catch or finally");else if(this.prev<e.finallyLoc)return b(e.finallyLoc)}}},abrupt:function abrupt(a,b){for(var c,d=this.tryEntries.length-1;0<=d;--d)if(c=this.tryEntries[d],c.tryLoc<=this.prev&&r.call(c,"finallyLoc")&&this.prev<c.finallyLoc){var e=c;break}e&&("break"===a||"continue"===a)&&e.tryLoc<=b&&b<=e.finallyLoc&&(e=null);var f=e?e.completion:{};return f.type=a,f.arg=b,e?(this.method="next",this.next=e.finallyLoc,w):this.complete(f)},complete:function complete(a,b){if("throw"===a.type)throw a.arg;return "break"===a.type||"continue"===a.type?this.next=a.arg:"return"===a.type?(this.rval=this.arg=a.arg,this.method="return",this.next="end"):"normal"===a.type&&b&&(this.next=b),w},finish:function finish(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.finallyLoc===a)return this.complete(b.completion,b.afterLoc),m(b),w},catch:function _catch(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.tryLoc===a){var d=b.completion;if("throw"===d.type){var e=d.arg;m(b);}return e}
	throw new Error("illegal catch attempt")},delegateYield:function delegateYield(a,b,c){return this.delegate={iterator:o(a),resultName:b,nextLoc:c},"next"===this.method&&(this.arg=void 0),w}},a}(
	a.exports);try{regeneratorRuntime=b;}catch(a){
	Function("r","regeneratorRuntime = r")(b);}});

	var regenerator=runtime_1;

	function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value;}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e);}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a);}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a);}var h=a.apply(b,c);f(void 0);})}}var asyncToGenerator=_asyncToGenerator;

	var timeoutSeconds=45,timeoutMilliseconds=45000;
	var timeoutWarning=setTimeout(function(){updateLoaderWarning("Preview is taking a very long time to load (more than ".concat(timeoutSeconds," seconds).<br />Try pressing \"preview\" again from the WordPress edit screen.<br />If you see this again, your preview builds are either slow or there's something wrong."));},timeoutMilliseconds);function showError(a){var b=document.getElementById("preview");b.style.display="none";var c=document.getElementById("loader");c.style.display="none";var d=document.getElementById("error-message-element");d.textContent=a;var e=document.querySelector(".content.error");e.style.display="block";}function updateLoaderWarning(a){var b=document.getElementById("preview-loader-warning");b.innerHTML="".concat(a,"<br /><br /><button id=\"cancel-button\" onclick=\"cancelPreviewLoader()\">Cancel and Troubleshoot</button>"),b.style.display="initial";var c=document.getElementById("cancel-button");c.addEventListener("keypress",function(a){"Enter"===a.key&&cancelPreviewLoader();}),c.addEventListener("click",cancelPreviewLoader);}function cancelPreviewLoader(){showError("Preview was cancelled.");}

	var previewStatusQuery="\n\tquery PREVIEW_STATUS_QUERY($postId: Float!) {\n\t\twpGatsby {\n\t\t\tgatsbyPreviewStatus(nodeId: $postId) {\n\t\t\t\tpageNode {\n\t\t\t\t\tpath\n\t\t\t\t}\n\t\t\t\tstatusType\n\t\t\t}\n\t\t}\n\t}\n";
	function fetchPreviewStatusAndUpdateUI(){return _fetchPreviewStatusAndUpdateUI.apply(this,arguments)}function _fetchPreviewStatusAndUpdateUI(){return _fetchPreviewStatusAndUpdateUI=asyncToGenerator(regenerator.mark(function a(){var b,c,d,e,f,g,h,i,j,k,l,m=arguments;return regenerator.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return d=0<m.length&&void 0!==m[0]?m[0]:{},e=d.refetchCount,f=void 0===e?0:e,g=d.refetchDelay,h=void 0===g?500:g,a.next=3,fetch("/?".concat(initialState.graphqlEndpoint),{method:"POST",body:JSON.stringify({query:previewStatusQuery,variables:{postId:initialState.postId}}),headers:{"Content-Type":"application/json"}});case 3:return a.next=5,a.sent.json();case 5:if(i=a.sent,j=(null===i||void 0===i||null===(b=i.data)||void 0===b||null===(c=b.wpGatsby)||void 0===c?void 0:c.gatsbyPreviewStatus)||{},k=j.statusType,"PREVIEW_READY"!==k){a.next=11;break}return clearTimeout(timeoutWarning),onPreviewReadyUpdateUI(i),a.abrupt("return");case 11:l={
	30:1e3,
	50:2e3,
	70:5e3},f++,h=l[f]||h,setTimeout(function(){console.log({previewStatusCheck:{response:i,refetchCount:f,refetchDelay:h}}),console.log("Preview not yet updated, retrying..."),fetchPreviewStatusAndUpdateUI({refetchCount:f,refetchDelay:h});},h);case 15:case"end":return a.stop();}},a)})),_fetchPreviewStatusAndUpdateUI.apply(this,arguments)}function onPreviewReadyUpdateUI(a){var b,c,d=(null===a||void 0===a||null===(b=a.data)||void 0===b?void 0:b.wpGatsby)||{},e=d.gatsbyPreviewStatus;if(console.log({previewReady:{gatsbyPreviewStatus:e}}),!e||!e.statusType||null===e||void 0===e||null===(c=e.pageNode)||void 0===c||!c.path)throw Error("Received an improper response from the Preview server.");var f=document.getElementById("preview");
	f.addEventListener("load",onIframeLoadedHideLoaderUI),f.src=initialState.previewFrontendUrl+e.pageNode.path;}function onIframeLoadedHideLoaderUI(){var a=document.getElementById("loader");
	setTimeout(function(){
	a.classList.add("loaded"),setTimeout(function(){
	a.style.display="none";},100);},50);}

	(function(){start().catch(function(a){console.error(a),"complete"===document.readyState||"loaded"===document.readyState?showError(a):document.addEventListener("DOMContentLoaded",function(){showError(a);});});})();function start(){return _start.apply(this,arguments)}function _start(){return _start=asyncToGenerator(regenerator.mark(function a(){var b;return regenerator.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return initialState.previewWebhookIsOnline&&fetchPreviewStatusAndUpdateUI(),a.next=3,fetch(initialState.previewFrontendUrl);case 3:if(b=a.sent,!b.ok){a.next=8;break}initialState.previewWebhookIsOnline||fetchPreviewStatusAndUpdateUI(),a.next=9;break;case 8:throw Error("The Gatsby Preview instance can't be reached.");case 9:case"end":return a.stop();}},a)})),_start.apply(this,arguments)}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcyIsIi4uL3NyYy9lcnJvci13YXJuaW5nLmpzIiwiLi4vc3JjL3ByZXZpZXctc3RhdHVzLmpzIiwiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjsiLCJjb25zdCB0aW1lb3V0U2Vjb25kcyA9IDQ1XG5jb25zdCB0aW1lb3V0TWlsbGlzZWNvbmRzID0gMTAwMCAqIHRpbWVvdXRTZWNvbmRzXG5cbi8qKlxuICogQWZ0ZXIgNDUgc2Vjb25kcywgZGlzcGxheSBhIHdhcm5pbmcsIHVubGVzcyBjYW5jZWxsZWQgYnkgY2xlYXJpbmcgdGhpcyB0aW1lb3V0IG9uY2UgdGhlIFVJIGlzIHVwZGF0ZWQgYW5kIHRoZSBpZnJhbWUgaXMgbG9hZGVkLlxuICovXG5leHBvcnQgY29uc3QgdGltZW91dFdhcm5pbmcgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0dXBkYXRlTG9hZGVyV2FybmluZyhcblx0XHRgUHJldmlldyBpcyB0YWtpbmcgYSB2ZXJ5IGxvbmcgdGltZSB0byBsb2FkIChtb3JlIHRoYW4gJHt0aW1lb3V0U2Vjb25kc30gc2Vjb25kcykuPGJyIC8+VHJ5IHByZXNzaW5nIFwicHJldmlld1wiIGFnYWluIGZyb20gdGhlIFdvcmRQcmVzcyBlZGl0IHNjcmVlbi48YnIgLz5JZiB5b3Ugc2VlIHRoaXMgYWdhaW4sIHlvdXIgcHJldmlldyBidWlsZHMgYXJlIGVpdGhlciBzbG93IG9yIHRoZXJlJ3Mgc29tZXRoaW5nIHdyb25nLmAsXG5cdClcbn0sIHRpbWVvdXRNaWxsaXNlY29uZHMpXG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RXJyb3IoZXJyb3IpIHtcblx0Y29uc3QgaWZyYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmV2aWV3XCIpXG5cdGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcblxuXHRjb25zdCBsb2FkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRlclwiKVxuXHRsb2FkZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG5cblx0Y29uc3QgZXJyb3JFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlcnJvci1tZXNzYWdlLWVsZW1lbnRcIilcblx0ZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JcblxuXHRjb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb250ZW50LmVycm9yXCIpXG5cdGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTG9hZGVyV2FybmluZyhtZXNzYWdlKSB7XG5cdGNvbnN0IHByZXZpZXdXYXJuaW5nUCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJldmlldy1sb2FkZXItd2FybmluZ1wiKVxuXG5cdHByZXZpZXdXYXJuaW5nUC5pbm5lckhUTUwgPSBgJHttZXNzYWdlfTxiciAvPjxiciAvPjxidXR0b24gaWQ9XCJjYW5jZWwtYnV0dG9uXCIgb25jbGljaz1cImNhbmNlbFByZXZpZXdMb2FkZXIoKVwiPkNhbmNlbCBhbmQgVHJvdWJsZXNob290PC9idXR0b24+YFxuXHRwcmV2aWV3V2FybmluZ1Auc3R5bGUuZGlzcGxheSA9IFwiaW5pdGlhbFwiXG5cblx0Y29uc3QgY2FuY2VsQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW5jZWwtYnV0dG9uXCIpXG5cblx0Y2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCBmdW5jdGlvbiAoZSkge1xuXHRcdGlmIChlLmtleSA9PT0gXCJFbnRlclwiKSB7XG5cdFx0XHRjYW5jZWxQcmV2aWV3TG9hZGVyKClcblx0XHR9XG5cdH0pXG5cblx0Y2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjYW5jZWxQcmV2aWV3TG9hZGVyKVxufVxuXG5mdW5jdGlvbiBjYW5jZWxQcmV2aWV3TG9hZGVyKCkge1xuXHRzaG93RXJyb3IoYFByZXZpZXcgd2FzIGNhbmNlbGxlZC5gKVxufVxuIiwiaW1wb3J0IHsgdGltZW91dFdhcm5pbmcgfSBmcm9tIFwiLi9lcnJvci13YXJuaW5nXCJcblxuY29uc3QgcHJldmlld1N0YXR1c1F1ZXJ5ID0gLyogR3JhcGhRTCAqLyBgXG5cdHF1ZXJ5IFBSRVZJRVdfU1RBVFVTX1FVRVJZKCRwb3N0SWQ6IEZsb2F0ISkge1xuXHRcdHdwR2F0c2J5IHtcblx0XHRcdGdhdHNieVByZXZpZXdTdGF0dXMobm9kZUlkOiAkcG9zdElkKSB7XG5cdFx0XHRcdHBhZ2VOb2RlIHtcblx0XHRcdFx0XHRwYXRoXG5cdFx0XHRcdH1cblx0XHRcdFx0c3RhdHVzVHlwZVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuYFxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIHRoZSBwcmV2aWV3IHN0YXR1cyB0aGF0IEdhdHNieSBoYXMgc3RvcmVkIGluIHBvc3QgbWV0YSBmb3JcbiAqIHRoZSBwYXJlbnQgcG9zdCBvZiB0aGlzIHByZXZpZXdcbiAqIFdoZW4gdGhlIHByZXZpZXcgaXMgcmVhZHksIGl0IGNhbGxzIG9uUHJldmlld1JlYWR5VXBkYXRlVUkoKSB3aGljaCB1cGRhdGVzIHRoZSBVSVxuICpcbiAqIElmIGEgc3RhdHVzIGJlc2lkZXMgUFJFVklFV19SRUFEWSBjb21lcyBiYWNrLCB3ZSB3YWl0IGEgYml0IGFuZCB0cnkgYWdhaW5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoUHJldmlld1N0YXR1c0FuZFVwZGF0ZVVJKHtcblx0cmVmZXRjaENvdW50ID0gMCxcblx0cmVmZXRjaERlbGF5ID0gNTAwLFxufSA9IHt9KSB7XG5cdC8vIEFzayBXUEdyYXBoUUwgZm9yIHRoZSBzdGF0dXMgb2YgdGhpcyBwcmV2aWV3XG5cdC8vIEdhdHNieSB3aWxsIHVwZGF0ZSB0aGlzIHdoZW4gdGhlIHByZXZpZXcgaXMgcmVhZHlcblx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoXG5cdFx0YXdhaXQgZmV0Y2goYC8/JHtpbml0aWFsU3RhdGUuZ3JhcGhxbEVuZHBvaW50fWAsIHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRib2R5OiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdHF1ZXJ5OiBwcmV2aWV3U3RhdHVzUXVlcnksXG5cdFx0XHRcdHZhcmlhYmxlczoge1xuXHRcdFx0XHRcdHBvc3RJZDogaW5pdGlhbFN0YXRlLnBvc3RJZCxcblx0XHRcdFx0fSxcblx0XHRcdH0pLFxuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcblx0XHRcdH0sXG5cdFx0fSlcblx0KS5qc29uKClcblxuXHRjb25zdCB7IHN0YXR1c1R5cGUgfSA9IHJlc3BvbnNlPy5kYXRhPy53cEdhdHNieT8uZ2F0c2J5UHJldmlld1N0YXR1cyB8fCB7fVxuXG5cdGlmIChzdGF0dXNUeXBlID09PSBgUFJFVklFV19SRUFEWWApIHtcblx0XHQvLyB3ZSBjbGVhciB0aGlzIHRpbWVvdXQgd2hlbiB0aGUgcHJldmlldyBpcyByZWFkeSBzbyB0aGF0IHRoZVxuXHRcdC8vIGxvbmcgcHJldmlldyB0aW1lIHdhcm5pbmcgZG9lc24ndCBhcHBlYXJcblx0XHRjbGVhclRpbWVvdXQodGltZW91dFdhcm5pbmcpXG5cblx0XHRvblByZXZpZXdSZWFkeVVwZGF0ZVVJKHJlc3BvbnNlKVxuXG5cdFx0Ly8gaWYgdGhlIHByZXZpZXcgaXMgcmVhZHkgd2UgZG9uJ3QgbmVlZCB0byBjb250aW51ZVxuXHRcdHJldHVyblxuXHR9XG5cblx0Y29uc3QgcmVmZXRjaERlbGF5TWFwID0ge1xuXHRcdC8vIGFmdGVyIDMwIHJldHJpZXMgb2YgNTAwbXMsIHN0YXJ0IGNoZWNraW5nIGV2ZXJ5IHNlY29uZFxuXHRcdDMwOiAxMDAwLFxuXHRcdC8vIGFmdGVyIDIwIG1vcmUgcmV0cmllcyBvZiAxIHNlY29uZCwgc3RhcnQgY2hlY2tpbmcgZXZlcnkgMiBzZWNvbmRzXG5cdFx0NTA6IDIwMDAsXG5cdFx0Ly8gYWZ0ZXIgMjAgbW9yZSByZXRyaWVzIG9mIDIgc2Vjb25kcywgc3RhcnQgY2hlY2tpbmcgZXZlcnkgNSBzZWNvbmRzXG5cdFx0NzA6IDUwMDAsXG5cdH1cblxuXHRyZWZldGNoQ291bnQrK1xuXHQvLyBvdXIgZGVsYXkgaW5jcmVhc2VzIGlmIHdlIGhhdmUgYSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgcmVmZXRjaENvdW50XG5cdHJlZmV0Y2hEZWxheSA9IHJlZmV0Y2hEZWxheU1hcFtyZWZldGNoQ291bnRdIHx8IHJlZmV0Y2hEZWxheVxuXG5cdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKHsgcHJldmlld1N0YXR1c0NoZWNrOiB7IHJlc3BvbnNlLCByZWZldGNoQ291bnQsIHJlZmV0Y2hEZWxheSB9IH0pXG5cdFx0Y29uc29sZS5sb2coYFByZXZpZXcgbm90IHlldCB1cGRhdGVkLCByZXRyeWluZy4uLmApXG5cblx0XHRmZXRjaFByZXZpZXdTdGF0dXNBbmRVcGRhdGVVSSh7XG5cdFx0XHRyZWZldGNoQ291bnQsXG5cdFx0XHRyZWZldGNoRGVsYXksXG5cdFx0fSlcblx0fSwgcmVmZXRjaERlbGF5KVxufVxuXG5mdW5jdGlvbiBvblByZXZpZXdSZWFkeVVwZGF0ZVVJKHJlc3BvbnNlKSB7XG5cdGNvbnN0IHsgZ2F0c2J5UHJldmlld1N0YXR1cyB9ID0gcmVzcG9uc2U/LmRhdGE/LndwR2F0c2J5IHx8IHt9XG5cblx0Y29uc29sZS5sb2coeyBwcmV2aWV3UmVhZHk6IHsgZ2F0c2J5UHJldmlld1N0YXR1cyB9IH0pXG5cblx0aWYgKFxuXHRcdCFnYXRzYnlQcmV2aWV3U3RhdHVzIHx8XG5cdFx0IWdhdHNieVByZXZpZXdTdGF0dXMuc3RhdHVzVHlwZSB8fFxuXHRcdCFnYXRzYnlQcmV2aWV3U3RhdHVzPy5wYWdlTm9kZT8ucGF0aFxuXHQpIHtcblx0XHR0aHJvdyBFcnJvcihgUmVjZWl2ZWQgYW4gaW1wcm9wZXIgcmVzcG9uc2UgZnJvbSB0aGUgUHJldmlldyBzZXJ2ZXIuYClcblx0fVxuXG5cdGNvbnN0IHByZXZpZXdJZnJhbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByZXZpZXdcIilcblxuXHQvLyB3aGVuIHRoZSBpZnJhbWUgbG9hZHMgd2Ugd2FudCBvdXIgaWZyYW1lIGxvYWRlZCB0byBmaXJlXG5cdC8vIHNvIHdlIGNhbiByZW1vdmUgdGhlIGxvYWRlclxuXHRwcmV2aWV3SWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIG9uSWZyYW1lTG9hZGVkSGlkZUxvYWRlclVJKVxuXG5cdC8vIHBvaW50IHRoZSBpZnJhbWUgYXQgdGhlIGZyb250ZW5kIHByZXZpZXcgdXJsIGZvciB0aGlzIHByZXZpZXdcblx0cHJldmlld0lmcmFtZS5zcmMgPVxuXHRcdGluaXRpYWxTdGF0ZS5wcmV2aWV3RnJvbnRlbmRVcmwgKyBnYXRzYnlQcmV2aWV3U3RhdHVzLnBhZ2VOb2RlLnBhdGhcbn1cblxuZnVuY3Rpb24gb25JZnJhbWVMb2FkZWRIaWRlTG9hZGVyVUkoKSB7XG5cdGNvbnN0IGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGVyXCIpXG5cblx0Ly8gdGhpcyBkZWxheSBwcmV2ZW50cyBhIGZsYXNoIGJldHdlZW5cblx0Ly8gdGhlIGlmcmFtZSBwYWludGluZyBhbmQgdGhlIGxvYWRlciBkaXNzYXBlYXJpbmdcblx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0Ly8gdGhlcmUgaXMgYSBmYWRlb3V0IGNzcyBhbmltYXRpb24gb24gdGhpc1xuXHRcdGxvYWRlci5jbGFzc0xpc3QuYWRkKFwibG9hZGVkXCIpXG5cblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdC8vIHdlIHdhaXQgYSBzZWMgdG8gZGlzcGxheSBub25lIHNvIHRoZSBjc3MgYW5pbWF0aW9uIGZhZGVvdXQgY2FuIGNvbXBsZXRlXG5cdFx0XHRsb2FkZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG5cdFx0fSwgMTAwKVxuXHR9LCA1MClcbn1cbiIsImltcG9ydCB7IHNob3dFcnJvciB9IGZyb20gXCIuL2Vycm9yLXdhcm5pbmdcIlxuaW1wb3J0IHsgZmV0Y2hQcmV2aWV3U3RhdHVzQW5kVXBkYXRlVUkgfSBmcm9tIFwiLi9wcmV2aWV3LXN0YXR1c1wiXG5cbi8qKlxuICogVGhpcyBmaWxlIGlzIHByaW50ZWQgb3V0IGluIHByZXZpZXctdGVtcGxhdGUucGhwXG4gKiBpbml0aWFsU3RhdGUgZ2xvYmFsIGNvbWVzIGZyb20gcHJldmlldy10ZW1wbGF0ZS5waHAgYWJvdmUgd2hlcmUgdGhpcyBpcyBwcmludGVkIHRvIHRoZSBwYWdlXG4gKi9cbjsoKCkgPT4ge1xuXHRzdGFydCgpLmNhdGNoKChlKSA9PiB7XG5cdFx0Y29uc29sZS5lcnJvcihlKVxuXHRcdGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJsb2FkZWRcIikge1xuXHRcdFx0Ly8gZG9jdW1lbnQgaXMgYWxyZWFkeSByZWFkeSB0byBnbyBzbyBzaG93IHRoZSBlcnJvclxuXHRcdFx0c2hvd0Vycm9yKGUpXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIG90aGVyd2lzZSB3YWl0IGZvciBpdCB0byBsb2FkIGJlZm9yZSBzaG93aW5nIHRoZSBlcnJvclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuXHRcdFx0XHRzaG93RXJyb3IoZSlcblx0XHRcdH0pXG5cdFx0fVxuXHR9KVxufSkoKVxuXG5hc3luYyBmdW5jdGlvbiBzdGFydCgpIHtcblx0aWYgKGluaXRpYWxTdGF0ZS5wcmV2aWV3V2ViaG9va0lzT25saW5lKSB7XG5cdFx0Ly8gb3B0aW1pc3RpY2FsbHkgdHJ5IHRvIGxvYWQgdGhlIFVJXG5cdFx0ZmV0Y2hQcmV2aWV3U3RhdHVzQW5kVXBkYXRlVUkoKVxuXHR9XG5cblx0Ly8gU2ltdWx0YW5lb3VzbHkgY2hlY2sgaWYgdGhlIGZyb250ZW5kIGhhcyBiZWVuIG9ubGluZVxuXHQvLyBzaW5jZSB0aGUgbGFzdCBiYWNrZW5kIGNoZWNrXG5cdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goaW5pdGlhbFN0YXRlLnByZXZpZXdGcm9udGVuZFVybClcblxuXHRpZiAocmVzcG9uc2Uub2spIHtcblx0XHQvLyBpZiB0aGUgcmVzcG9uc2UgY2FtZSBiYWNrIG9rIGFuZCB3ZSBoYXZlbid0IGFscmVhZHkgc3RhcnRlZCBsb2FkaW5nIHRoZSBVSVxuXHRcdGlmICghaW5pdGlhbFN0YXRlLnByZXZpZXdXZWJob29rSXNPbmxpbmUpIHtcblx0XHRcdC8vIHN0YXJ0IGxvYWRpbmcgaXQgYmVjYXVzZSB0aGUgZnJvbnRlbmQgYWN0dWFsbHkgaXMgb25saW5lXG5cdFx0XHRmZXRjaFByZXZpZXdTdGF0dXNBbmRVcGRhdGVVSSgpXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIG90aGVyd2lzZSB0aHJvd2luZyB0aGlzIHdpbGwgZGlzcGxheSB0aGUgZXJyb3IgVUlcblx0XHR0aHJvdyBFcnJvcihgVGhlIEdhdHNieSBQcmV2aWV3IGluc3RhbmNlIGNhbid0IGJlIHJlYWNoZWQuYClcblx0fVxufVxuIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJtb2R1bGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwicnVudGltZSIsImV4cG9ydHMiLCJkZWZpbmUiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJmbiIsImFyZyIsInR5cGUiLCJjYWxsIiwiZXJyIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJtZXRob2QiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVjb3JkIiwicmVzdWx0IiwiaGFzT3duIiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsImVucXVldWUiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInByZXZpb3VzUHJvbWlzZSIsInN0YXRlIiwiRXJyb3IiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJkb25lIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJlbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwidmFsdWVzIiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsIml0ZXJhdG9yU3ltYm9sIiwiaXNOYU4iLCJsZW5ndGgiLCJpIiwiT3AiLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJ0b1N0cmluZyIsImtleXMiLCJvYmplY3QiLCJyZXZlcnNlIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJyb290RW50cnkiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiRnVuY3Rpb24iLCJyZXF1aXJlJCQwIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsInRpbWVvdXRTZWNvbmRzIiwidGltZW91dE1pbGxpc2Vjb25kcyIsInRpbWVvdXRXYXJuaW5nIiwic2V0VGltZW91dCIsInVwZGF0ZUxvYWRlcldhcm5pbmciLCJzaG93RXJyb3IiLCJpZnJhbWUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5IiwibG9hZGVyIiwiZXJyb3JFbGVtZW50IiwidGV4dENvbnRlbnQiLCJjb250ZW50IiwicXVlcnlTZWxlY3RvciIsIm1lc3NhZ2UiLCJwcmV2aWV3V2FybmluZ1AiLCJpbm5lckhUTUwiLCJjYW5jZWxCdXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImNhbmNlbFByZXZpZXdMb2FkZXIiLCJwcmV2aWV3U3RhdHVzUXVlcnkiLCJmZXRjaFByZXZpZXdTdGF0dXNBbmRVcGRhdGVVSSIsInJlZmV0Y2hDb3VudCIsInJlZmV0Y2hEZWxheSIsImZldGNoIiwiaW5pdGlhbFN0YXRlIiwiZ3JhcGhxbEVuZHBvaW50IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJxdWVyeSIsInZhcmlhYmxlcyIsInBvc3RJZCIsImhlYWRlcnMiLCJqc29uIiwicmVzcG9uc2UiLCJkYXRhIiwid3BHYXRzYnkiLCJnYXRzYnlQcmV2aWV3U3RhdHVzIiwic3RhdHVzVHlwZSIsImNsZWFyVGltZW91dCIsIm9uUHJldmlld1JlYWR5VXBkYXRlVUkiLCJyZWZldGNoRGVsYXlNYXAiLCJjb25zb2xlIiwibG9nIiwicHJldmlld1N0YXR1c0NoZWNrIiwicHJldmlld1JlYWR5IiwicGFnZU5vZGUiLCJwYXRoIiwicHJldmlld0lmcmFtZSIsIm9uSWZyYW1lTG9hZGVkSGlkZUxvYWRlclVJIiwic3JjIiwicHJldmlld0Zyb250ZW5kVXJsIiwiY2xhc3NMaXN0IiwiYWRkIiwic3RhcnQiLCJjYXRjaCIsInJlYWR5U3RhdGUiLCJwcmV2aWV3V2ViaG9va0lzT25saW5lIiwib2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQUFBLFNBQVNBLENBQVQsQ0FBaUJDLENBQWpCLENBQXNCLENBQ3BCLDBCQVlBLE9BVEVDLFNBU0YsQ0FWc0IsVUFBbEIsU0FBT0MsTUFBUCxFQUEyRCxRQUEzQixTQUFPQSxNQUFNLENBQUNDLFFBVWxELENBVG1CSixDQUFPLENBQUcsU0FBaUJDLENBQWpCLENBQXNCLENBQy9DLGNBQWNBLENBQ2YsQ0FPSCxDQUxtQkQsQ0FBTyxDQUFHLFNBQWlCQyxDQUFqQixDQUFzQixDQUMvQyxPQUFPQSxDQUFHLEVBQXNCLFVBQWxCLFNBQU9FLE1BQWQsRUFBdUNGLENBQUcsQ0FBQ0ksV0FBSixHQUFvQkYsTUFBM0QsRUFB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
