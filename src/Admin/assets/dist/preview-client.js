(function (_regeneratorRuntime, _slicedToArray, _asyncToGenerator) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
	var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
	var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);

	var timeoutSeconds=45,timeoutMilliseconds=45000;/**
	 * After 45 seconds, display a warning, unless cancelled by clearing this timeout once the UI is updated and the iframe is loaded.
	 */var timeoutWarning=setTimeout(function(){updateLoaderWarning("Preview is taking a very long time to load (more than ".concat(timeoutSeconds," seconds).<br />Try pressing \"preview\" again from the WordPress edit screen.<br />If you see this again, your preview builds are either slow or there's something wrong."));},timeoutMilliseconds);function showError(a){"string"==typeof a&&(a={message:a});var b=document.getElementById("preview");b.style.display="none";var c=document.getElementById("loader");c.style.display="none";var d=document.getElementById("error-message-element");d.textContent="".concat(a.message).concat(a.context?":\n".concat(a.context):"");var e=document.querySelector(".content.error");e.style.display="block","NO_PAGE_CREATED_FOR_PREVIEWED_NODE"===a.message?document.getElementById("troubleshooting-html-area").innerHTML="\n\t\t\t<p>If you're not a developer, please screenshot this page and send it to your developer.<br /><br /><b>Note:</b> Once this error is fixed, you'll need to press \"preview\" again to clear out this message.<br/><br/>Gatsby wasn't able to find a page for the post you're trying to preview. This can mean one of three things:\n\t\t\t</p>\n\t\t\t<ol>\n\t\t\t\t <li>A page is not being built for the post being previewed.</li>\n\t\t\t\t <li>The id of this post is not being included in the pageContext of it's Gatsby page.</li>\n\t\t\t\t <li>An error was thrown in Gatsby during Preview sourcing (check your logs).</li>\n\t\t\t</ol>\n\t\t\t<br /> \n\t\t\t<p>\n\t\t\t\t<b>Hint:</b> if you want to account for any possible post type (even those that haven't yet been registered) you can use the WpContentNode interface as a fallback template in gatsby-node.js when you're creating pages and you'll never see this message when registering new post types.\n\t\t\t</p>\t\t\t\n\t\t":"GATSBY_PREVIEW_PROCESS_ERROR"===a.message&&(document.getElementById("troubleshooting-html-area").innerHTML="\n\t\t\t<p>If you're not a developer, please screenshot this page and send it to your developer.<br /><br /><b>Note:</b> Once this error is fixed, you'll need to press \"preview\" again to clear out this message.<br/><br/>The Gatsby Preview process errored while sourcing this preview.<br />Please check your error logs for additional information.\n\t\t\t</p>\t\t\t\n\t\t");}function updateLoaderWarning(a){var b=document.getElementById("preview-loader-warning");b.innerHTML="".concat(a,"<br /><br /><button id=\"cancel-button\" onclick=\"cancelPreviewLoader()\">Cancel and Troubleshoot</button>"),b.style.display="initial";var c=document.getElementById("cancel-button");c.addEventListener("keypress",function(a){"Enter"===a.key&&cancelPreviewLoader();}),c.addEventListener("click",cancelPreviewLoader);}function cancelPreviewLoader(){showError("Preview was cancelled.");}

	var previewStatusQuery=/* GraphQL */"\n\tquery PREVIEW_STATUS_QUERY($postId: Float!) {\n\t\twpGatsby {\n\t\t\tgatsbyPreviewStatus(nodeId: $postId) {\n\t\t\t\tpageNode {\n\t\t\t\t\tpath\n\t\t\t\t}\n\t\t\t\tstatusType\n\t\t\t\tremoteStatusType\n\t\t\t\tstatusContext\n\t\t\t}\n\t\t}\n\t}\n";/**
	 * This function checks the preview status that Gatsby has stored in post meta for
	 * the parent post of this preview
	 * When the preview is ready, it calls onPreviewReadyUpdateUI() which updates the UI
	 *
	 * If a status besides PREVIEW_READY comes back, we wait a bit and try again
	 *
	 * This function doesn't return anything
	 */function fetchPreviewStatusAndUpdateUI(){return _fetchPreviewStatusAndUpdateUI.apply(this,arguments)}function _fetchPreviewStatusAndUpdateUI(){return _fetchPreviewStatusAndUpdateUI=_asyncToGenerator__default['default'](/*#__PURE__*/_regeneratorRuntime__default['default'].mark(function a(){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p=arguments;return _regeneratorRuntime__default['default'].wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return d=0<p.length&&void 0!==p[0]?p[0]:{},e=d.refetchCount,f=void 0===e?0:e,g=d.refetchDelay,h=void 0===g?500:g,a.next=3,fetch("/?".concat(initialState.graphqlEndpoint),{method:"POST",body:JSON.stringify({query:previewStatusQuery,variables:{postId:initialState.postId}}),headers:{"Content-Type":"application/json"}});case 3:return a.next=5,a.sent.json();case 5:if(i=a.sent,j=(null===i||void 0===i||null===(b=i.data)||void 0===b||null===(c=b.wpGatsby)||void 0===c?void 0:c.gatsbyPreviewStatus)||{},k=j.statusType,l=j.remoteStatusType,m=j.statusContext,n=["NO_PAGE_CREATED_FOR_PREVIEWED_NODE","GATSBY_PREVIEW_PROCESS_ERROR"].includes(l),!n){a.next=12;break}throw console.log({response:i}),clearTimeout(timeoutWarning),{message:l,context:m};case 12:if("PREVIEW_READY"!==k){a.next=16;break}return clearTimeout(timeoutWarning),onPreviewReadyUpdateUI(i),a.abrupt("return");case 16:return o={// after 30 retries of 500ms, start checking every second
	30:1e3,// after 20 more retries of 1 second, start checking every 2 seconds
	50:2e3,// after 20 more retries of 2 seconds, start checking every 5 seconds
	70:5e3},f++,h=o[f]||h,a.next=21,new Promise(function(a){return setTimeout(function(){console.log({previewStatusCheck:{response:i,refetchCount:f,refetchDelay:h}}),console.log("Preview not yet updated, retrying..."),a();},h)});case 21:return a.next=23,fetchPreviewStatusAndUpdateUI({refetchCount:f,refetchDelay:h});case 23:case"end":return a.stop();}},a)})),_fetchPreviewStatusAndUpdateUI.apply(this,arguments)}function onPreviewReadyUpdateUI(a){var b,c,d=(null===a||void 0===a||null===(b=a.data)||void 0===b?void 0:b.wpGatsby)||{},e=d.gatsbyPreviewStatus;if(console.log({previewReady:{gatsbyPreviewStatus:e}}),!e||!e.statusType||null===e||void 0===e||null===(c=e.pageNode)||void 0===c||!c.path)throw Error("Received an improper response from the Preview server.");var f=document.getElementById("preview");// when the iframe loads we want our iframe loaded to fire
	// so we can remove the loader
	f.addEventListener("load",onIframeLoadedHideLoaderUI),f.src=initialState.previewFrontendUrl+e.pageNode.path;}function onIframeLoadedHideLoaderUI(){var a=document.getElementById("loader");// this delay prevents a flash between
	// the iframe painting and the loader dissapearing
	setTimeout(function(){// there is a fadeout css animation on this
	a.classList.add("loaded"),setTimeout(function(){// we wait a sec to display none so the css animation fadeout can complete
	a.style.display="none";},100);},50);}

	start().catch(function(a){console.error(a),"complete"===document.readyState?showError(a):document.addEventListener("DOMContentLoaded",function(){showError(a);});});function start(){return _start.apply(this,arguments)}function _start(){return _start=_asyncToGenerator__default['default'](/*#__PURE__*/_regeneratorRuntime__default['default'].mark(function a(){var b,c,d;return _regeneratorRuntime__default['default'].wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,Promise.all([// optimistically try to load the UI
	initialState.previewWebhookIsOnline&&fetchPreviewStatusAndUpdateUI(),// Also check if the frontend has been online
	// since the last backend check
	fetch(initialState.previewFrontendUrl)]);case 2:if(b=a.sent,c=_slicedToArray__default['default'](b,2),d=c[1],!d.ok){a.next=11;break}if(initialState.previewWebhookIsOnline){a.next=9;break}return a.next=9,fetchPreviewStatusAndUpdateUI();case 9:a.next=12;break;case 11:throw Error("The Gatsby Preview instance can't be reached.");case 12:case"end":return a.stop();}},a)})),_start.apply(this,arguments)}

}(_regeneratorRuntime, _slicedToArray, _asyncToGenerator));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
